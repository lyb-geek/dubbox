<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 缓存管理器 使用Ehcache实现 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
	</bean>

	<!-- shiroDAO接口,自定义DAO，将session存放redis -->
	<bean id="sessionDAO" class="com.dubbo.demo.shiro.dao.RedisSessionDao">
		<property name="template" ref="redisClientTemplate" />
		<!-- 单位：秒，30分钟 -->
		<property name="timeToLiveSeconds" value="1800" />
	</bean>

	<!-- 会话验证调度器，每隔一段时间清理失效的用户session -->
	<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
		<!--单位：毫秒； 间隔多少时间检查，不配置是60分钟，现在配置的是30分钟 -->
		<property name="interval" value="1800000" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>

	<!-- 会话Cookie模板会话Cookie模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- cookie在浏览器的name -->
		<constructor-arg value="sid" />
		<property name="httpOnly" value="true" />
		<!-- maxAge=-1表示浏览器关闭时失效此Cookie -->
		<property name="maxAge" value="-1" />
	</bean>

	<!-- 用户信息 remenberME -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe" />
		<property name="httpOnly" value="true" />
		<!-- 30天 -->
		<property name="maxAge" value="2592000" />
	</bean>

	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位） -->
		<property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />
		<property name="cookie" ref="rememberMeCookie" />
	</bean>

	<!-- Session 管理器 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 单位：毫秒；设置ehcache全局会话超时时间，默认30分钟，即如果30分钟内没有访问会话将过期 -->
		<property name="globalSessionTimeout" value="1800000" />
		<property name="sessionDAO" ref="sessionDAO" />
		<!-- 间隔多少时间检查，不配置是60分钟 -->
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
		<!-- 是否开启 检测，默认开启 -->
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<!-- 删除失效的session -->
		<property name="deleteInvalidSessions" value="true" />
		<!-- 会话Cookie模板 -->
		<property name="sessionIdCookie" ref="sessionIdCookie" />
	</bean>
	
	<!-- 并发登录控制 -->
	<bean id="kickoutSessionControlFilter" class="com.dubbo.demo.shiro.web.filter.KickoutSessionControlFilter">
		<property name="cacheManager" ref="cacheManager"/>  
	    <property name="sessionManager" ref="sessionManager"/>  
	    <property name="kickoutAfter" value="false"/>  
	    <property name="maxSession" value="1"/>  
	    <property name="kickoutUrl" value="/login?kickout=1"/>
	</bean>

	<!-- 自定义的RolesFilter 修改权限如： role["admin","employee"]，表示要满足同时拥有两个角色， 相当于 
		‘And’ 问题，将And关系改为Or，只要满足其中一个角色即可。 -->
	<bean id="anyRoles" class="com.dubbo.demo.shiro.web.filter.authz.RolesAuthorizationFilter" />

	<!-- 自定义realm -->
	<bean id="myRealm" class="com.dubbo.demo.shiro.realm.myRealm" />

	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm" />
		<property name="sessionManager" ref="sessionManager" />
		<!-- Ehcache 缓存 -->
		<property name="cacheManager" ref="cacheManager" />
		<!-- 记住me -->
		<property name="rememberMeManager" ref="rememberMeManager" />
	</bean>

	<!-- shiro拦截器 -->
	<bean id="shiroFilter" class="com.dubbo.demo.shiro.web.MyShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- 登录页 -->
		<property name="loginUrl" value="/login" />
		<!-- 验证成功跳转的页面 -->
		<property name="successUrl" value="/index" />
		<!-- 权限认证失败，则跳转到指定页面 -->
		<property name="unauthorizedUrl" value="/unauthor" />
		<property name="filters">
			<map>
				<entry key="anyRoles" value-ref="anyRoles" />
				<entry key="kickout" value-ref="kickoutSessionControlFilter"/>
			</map>
		</property>
		<!-- shiro连接约束配置,在这里使用自定义的 从数据库中动态获取资源， 
			直接赋值ShiroFilterFactoryBean的filterChainDefinitionMap， 
			不用赋值 filterChainDefinitions了 -->
		<property name="filterChainDefinitionMap" ref="DynamicUrls" />
	</bean>

	<!-- 动态拦截url,修改的话，重启才生效 -->
	<bean id="DynamicUrls" class="com.dubbo.demo.shiro.bean.DynamicUrls">
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<property name="filterChainDefinitions">
			<value>
				<!-- 静态资源 -->
				/css/**=anon
				/js/**=anon
				/ico/**=anon
				/images/**=anon
				/ueditor/**=anon
				/layer/**=anon
				<!-- alibaba的druid监控器 -->
				<!-- /druid/**=anyRoles["admin"] -->
				<!-- /user/**=roles["admin"] -->
				<!-- /user/**=roles[admin] -->
				<!-- /user/view=perms["user:view"] /user/edit=perms["user:edit"] -->
				<!-- 所有的都需要验证 -->
				<!-- /**=authc -->
			</value>
		</property>
	</bean>
	
	<!-- session操作类 -->
	<bean id="activityUserHelper" class="com.dubbo.demo.shiro.web.helper.ActivityUserHelper">
		<property name="sessionDAO" ref="sessionDAO" />
	</bean>
	
	<!-- AOP式方法级权限检查   这两个类主要用于注解-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" 
    	depends-on="lifecycleBeanPostProcessor">
    	<property name="proxyTargetClass" value="true" />
	</bean>
    
	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- shiro 权限注解 抛出异常 指定跳转的页面(unauthor.jsp) -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">/unauthor</prop>
				<prop key="org.apache.shiro.authz.UnauthenticatedException">/login</prop>
			</props>
		</property>
	</bean>
</beans>
